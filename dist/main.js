/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements:  */
eval("ethereumAddresses = [];\nsamePrice = [];\nallTimeHighPrice = 0;\nmenuItem = 0;\nfilterDays = 365;\nexchange = \"CCCAGG\";\n$(document).ready(function () {\n  var localDate = new Date();\n  timeOffset = localDate.getTimezoneOffset() / 60;\n  var day = localDate.getDate();\n  var dayLong = getDayNumber(day);\n  var month = getMonthName(localDate.getMonth());\n  var weekDay = getWeekDay(localDate.getDay());\n  $(\".date-num\").html(day);\n  $(\".date-info\").html(weekDay + \", \" + month + \" \" + dayLong + \" \");\n});\n\nfunction getHistoricalPriceData(coinNumerator, coinDenominator, unixEntered, divide) {\n  var url = \"https://min-api.cryptocompare.com/data/histoday?fsym=\" + coinNumerator + \"&tsym=\" + coinDenominator + \"&limit=2000&aggregate=1&toTs=\" + unixEntered + \"&e=\" + exchange;\n  var urlEntered = divide ? url + \"&tryConversion=false\" : url;\n  var options = {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json;charset=UTF-8\"\n    }\n  };\n  fetch(urlEntered, options).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    console.log(data);\n    convert = 0;\n    var historicalPrice = [];\n    var historicalOpen = [];\n    var historicalLow = [];\n    var historicalHigh = [];\n    var historicalDate = [];\n    var historicalChange = [];\n    var historicalWeekday = [];\n\n    if (data.ConversionType.type === \"divide\") {\n      getHistoricalPriceData(coinNumerator, coinDenominator, unixEntered, 1);\n    } else {\n      for (var i = 1999; i >= 1; i--) {\n        var newDate = new Date((data.Data[i].time + 86400) * 1000).toString();\n\n        if (data.Data[i].close == []) {\n          i = 0;\n        } else {\n          historicalPrice.push(data.Data[i].close);\n          historicalLow.push(data.Data[i].low);\n          historicalHigh.push(data.Data[i].high);\n          historicalOpen.push(data.Data[i].open);\n          historicalDate.push(convertDateFormat(newDate));\n          var previousDayPrice = data.Data[i - 1].close;\n          var dayOfPrice = data.Data[i].close;\n\n          if (previousDayPrice === 0) {\n            dailyChangePrice = 0;\n          } else {\n            var dailyChangePrice = dayOfPrice / previousDayPrice - 1;\n          }\n\n          historicalChange.push(dailyChangePrice * 100);\n        }\n\n        var dayOfWeek = newDate.substr(0, 3);\n        historicalWeekday.push(dayOfWeek);\n      }\n\n      maxDaysHandle(historicalDate);\n      console.log(historicalPrice);\n\n      switch (menuItem) {\n        case 0:\n          plotPriceHistory(historicalDate, historicalPrice, historicalLow, historicalHigh, historicalOpen, coinDenominator, coinNumerator);\n          break;\n\n        case 1:\n          plotWeekdayChange(historicalChange, historicalWeekday, historicalDate, coinNumerator, coinDenominator);\n          break;\n\n        case 2:\n          getHistoricalATHData(coinNumerator, coinDenominator, unixEntered, data, historicalPrice, historicalLow, historicalHigh, historicalOpen, historicalDate, historicalWeekday, historicalChange);\n          break;\n      }\n    }\n  });\n} // function getRecentEqualPrices(\n//   historicalPrice,\n//   historicalLow,\n//   historicalHigh,\n//   historicalOpen,\n//   historicalDate,\n//   historicalWeekday,\n//   historicalChange,\n//   coinNumerator,\n//   coinDenominator,\n//   allTimeHighRatio,\n//   allTimeHighRatioDates,\n//   allTimeHighRelativePrice\n// ) {\n//   switch (menuItem) {\n//     case 0:\n//       plotPriceHistory(\n//         historicalDate,\n//         historicalPrice,\n//         historicalLow,\n//         historicalHigh,\n//         historicalOpen,\n//         coinDenominator,\n//         coinNumerator\n//       );\n//       break;\n//     case 1:\n//       plotWeekdayChange(\n//         historicalChange,\n//         historicalWeekday,\n//         historicalDate,\n//         coinNumerator,\n//         coinDenominator\n//       );\n//       break;\n//     case 2:\n//       plotATHHistory(\n//         allTimeHighRelativePrice,\n//         allTimeHighRatioDates,\n//         coinDenominator,\n//         coinNumerator,\n//         allTimeHighRatio\n//       );\n//       break;\n//   }\n// }\n\n\n$(\".submit\").click(onSubmit());\n\nfunction onSubmit() {\n  var coinNumerator = $(\"#coinCompare1\").val().toUpperCase();\n  var coinDenominator = $(\"#denom-choices\").val().toUpperCase();\n  var monthEntry = $(\"#dateEntry1\").val();\n  var dayEntry = $(\"#dateEntry2\").val();\n  var yearEntry = $(\"#dateEntry3\").val();\n  var enteredDate = new Date(yearEntry, monthEntry - 1, dayEntry);\n  unixEntered = enteredDate.getTime() / 1000 + 24 * 60 * 60;\n  getHistoricalPriceData(coinNumerator, coinDenominator, unixEntered, 0);\n\n  if (menuItem === 3) {\n    getHistoricalHourlyData(coinNumerator, coinDenominator, unixEntered);\n  }\n}\n\n$(\".nav-price\").click(function () {\n  menuItem = 0;\n  filterDays = 365;\n  changeHandle();\n  onSubmit();\n});\n$(\".nav-weekday\").click(function () {\n  menuItem = 1;\n  filterDays = 30;\n  changeHandle();\n  onSubmit();\n});\n$(\".nav-ath\").click(function () {\n  menuItem = 2;\n  filterDays = 365;\n  changeHandle();\n  onSubmit();\n});\n$(\".nav-hourly\").click(function () {\n  menuItem = 3;\n  filterDays = 30;\n  changeHandle();\n  onSubmit();\n});\n\nfunction getCurrentPriceData(coinNumerator, coinDenominator) {\n  $.get(\"https://min-api.cryptocompare.com/data/price?fsym=\" + coinNumerator + \"&tsyms=\" + coinDenominator + \"&e=\" + exchange, function (data) {\n    currentPrice = data[coinDenominator];\n\n    if (allTimeHighPrice > 0) {\n      $(\".currentPriceOutput\").html(\"Current Price of \" + coinNumerator + \": \" + currentPrice + \" \" + coinDenominator + \"</br> (\" + Math.round(currentPrice / allTimeHighPrice * 10000) / 100 + \"% of ATH)\");\n    } else {\n      $(\".currentPriceOutput\").html(\"Current Price of \" + coinNumerator + \": \" + currentPrice + \" \" + coinDenominator + \"</br> (100% of ATH)\");\n    }\n  });\n}\n\nfunction getHistoricalATHData(coinNumerator, coinDenominator, unixEntered, data, historicalPrice, historicalLow, historicalHigh, historicalOpen, historicalDate, historicalWeekday, historicalChange) {\n  allTimeHighRatio = [];\n  allTimeHighRatioDates = [];\n  allTimeHighRelativePrice = [];\n  allTimeHighPrice = 0;\n\n  for (var i = 0; i <= 1999; i++) {\n    if (data.Data[i].high > allTimeHighPrice && data.Data[i].high <= 5 * data.Data[i].close) {\n      var allTimeHighDate = new Date((data.Data[i].time + 86400) * 1000);\n      var athRatio = 100 * data.Data[i].close / allTimeHighPrice;\n\n      if (athRatio <= 500) {\n        allTimeHighRatio.push(athRatio);\n      } else {\n        allTimeHighRatio.push(100);\n      }\n\n      allTimeHighRelativePrice.push(data.Data[i].close);\n      var ratioDate = new Date((data.Data[i].time + 86400) * 1000);\n      allTimeHighRatioDates.push(allTimeHighDate);\n      allTimeHighPrice = data.Data[i].high;\n    } else if (allTimeHighPrice !== 0) {\n      var athRatio = 100 * data.Data[i].close / allTimeHighPrice;\n\n      if (athRatio <= 500) {\n        allTimeHighRatio.push(athRatio);\n      } else {\n        allTimeHighRatio.push(100);\n      }\n\n      allTimeHighRelativePrice.push(data.Data[i].close);\n      var ratioDate = new Date((data.Data[i].time + 86400) * 1000);\n      allTimeHighRatioDates.push(ratioDate);\n    }\n  }\n\n  $(\".allTimeHighPriceOutput\").html(\"ATH of \" + coinNumerator + \": \" + allTimeHighPrice + \"</br> on \" + allTimeHighDate.toString().substring(4, 15));\n  getCurrentPriceData(coinNumerator, coinDenominator);\n  setTimeout(function () {\n    plotATHHistory(allTimeHighRelativePrice, allTimeHighRatioDates, coinDenominator, coinNumerator, allTimeHighRatio);\n  }, 1000);\n}\n\nfunction plotPriceHistory(historicalDate, historicalPrice, historicalLow, historicalHigh, historicalOpen, coinDenominator, coinNumerator) {\n  var d3 = Plotly.d3;\n  console.log(historicalPrice);\n  var WIDTH_IN_PERCENT_OF_PARENT = 100,\n      HEIGHT_IN_PERCENT_OF_PARENT = 60;\n  var gd3 = d3.select(\"#myDiv\").style({\n    width: WIDTH_IN_PERCENT_OF_PARENT + \"%\",\n    \"margin-left\": (100 - WIDTH_IN_PERCENT_OF_PARENT) / 2 + \"%\",\n    height: HEIGHT_IN_PERCENT_OF_PARENT + \"vh\",\n    \"margin-top\": (60 - HEIGHT_IN_PERCENT_OF_PARENT) / 2 + \"vh\",\n    \"margin-bottom\": 0,\n    \"padding-bottom\": 0\n  });\n  var gd = gd3.node();\n  var trace3 = {\n    x: historicalDate.slice(0, filterDays),\n    y: historicalPrice.slice(0, filterDays),\n    mode: \"lines\",\n    name: \"Close price\",\n    type: \"scatter\"\n  };\n  var trace1 = {\n    x: historicalDate.slice(0, filterDays),\n    close: historicalPrice.slice(0, filterDays),\n    open: historicalOpen.slice(0, filterDays),\n    high: historicalHigh.slice(0, filterDays),\n    low: historicalLow.slice(0, filterDays),\n    mode: \"lines\",\n    name: \"Close price\",\n    type: \"candlestick\"\n  };\n  var layout = {\n    title: \"Close Price \" + coinNumerator + \" vs \" + coinDenominator,\n    xaxis: {\n      title: \"Date\",\n      titlefont: {\n        family: \"Courier New, monospace\",\n        size: 18,\n        color: \"#7f7f7f\"\n      },\n      fixedrange: true,\n      rangeslider: {\n        visible: false\n      }\n    },\n    yaxis: {\n      title: \"Price\" + \"(\" + coinDenominator + \")\",\n      type: \"linear\",\n      autorange: true,\n      titlefont: {\n        family: \"Courier New, monospace\",\n        size: 18,\n        color: \"#7f7f7f\"\n      },\n      fixedrange: true\n    } // shapes: [\n    //   {\n    //     type: \"line\",\n    //     xref: \"paper\",\n    //     x0: 0,\n    //     x1: 1,\n    //     y0: currentPrice,\n    //     y1: currentPrice,\n    //     line: {\n    //       color: \"rgb(50, 11, 96)\",\n    //       width: 1,\n    //       dash: \"dashdot\",\n    //     },\n    //   },\n    // ],\n\n  };\n\n  if (convert === 0) {\n    var plotData = [trace1];\n  } else {\n    plotData = [trace3];\n  }\n\n  Plotly.newPlot(gd, plotData, layout);\n  $(\".radio2\").addClass(\"hide\");\n  $(\".radio1\").removeClass(\"hide\");\n  $(\"#radio1\").click(function () {\n    if (layout.yaxis.type === \"log\") {\n      layout.yaxis.type = \"linear\";\n    } else {\n      layout.yaxis.type = \"log\";\n    }\n\n    Plotly.newPlot(gd, plotData, layout);\n  });\n\n  window.onresize = function () {\n    Plotly.Plots.resize(gd);\n  };\n}\n\nfunction plotWeekdayChange(historicalChange, historicalWeekday, historicalDate, coinNumerator, coinDenominator) {\n  var d3 = Plotly.d3;\n  var WIDTH_IN_PERCENT_OF_PARENT = 100,\n      HEIGHT_IN_PERCENT_OF_PARENT = 60;\n  var gd3 = d3.select(\"#myDiv\").style({\n    width: WIDTH_IN_PERCENT_OF_PARENT + \"%\",\n    \"margin-left\": (100 - WIDTH_IN_PERCENT_OF_PARENT) / 2 + \"%\",\n    height: HEIGHT_IN_PERCENT_OF_PARENT + \"vh\",\n    \"margin-top\": (60 - HEIGHT_IN_PERCENT_OF_PARENT) / 2 + \"vh\",\n    \"margin-bottom\": 0,\n    \"padding-bottom\": 0\n  });\n  var gd = gd3.node();\n  historicalChange = historicalChange.slice(0, filterDays);\n  historicalWeekday = historicalWeekday.slice(0, filterDays);\n  historicalDate = historicalDate.slice(0, filterDays);\n  var trace1 = {\n    x: historicalWeekday,\n    text: historicalDate,\n    y: historicalChange,\n    mode: \"markers\",\n    type: \"scatter\"\n  };\n  var groups2 = {};\n  $.each(historicalWeekday, function (ind, itm) {\n    if (!groups2[itm]) {\n      groups2[itm] = {\n        weekValues: []\n      };\n    }\n\n    groups2[itm].weekValues.push(historicalChange[ind]); // sum values belonging to same key\n  });\n  var weeklyChangeAverage = [];\n  var weeklyChangeMedian = [];\n  var weeklyChangeStd = [];\n  var weeklyCI = [];\n\n  for (var i = 0; i <= 6; i++) {\n    weeklyChangeAverage.push(math.mean(groups2[historicalWeekday[i]].weekValues));\n    weeklyChangeMedian.push(math.median(groups2[historicalWeekday[i]].weekValues));\n    weeklyChangeStd.push(math.std(groups2[historicalWeekday[i]].weekValues));\n    weeklyCI.push(1.96 * (weeklyChangeStd[i] / math.sqrt(groups2[historicalWeekday[i]].weekValues.length)));\n  }\n\n  var errorBars = {\n    x: historicalWeekday,\n    y: weeklyChangeAverage,\n    error_y: {\n      type: \"data\",\n      array: weeklyCI,\n      visible: true\n    },\n    mode: \"markers\",\n    type: \"scatter\",\n    name: \"Mean + CI\"\n  };\n  var trace2 = {\n    x: historicalWeekday,\n    y: weeklyChangeMedian,\n    mode: \"markers\",\n    type: \"scatter\",\n    name: \"Median\"\n  };\n\n  if (timeOffset >= 0) {\n    var layout = {\n      hovermode: \"closest\",\n      title: \"<b>Day of Week\" + \" (\" + coinNumerator + \")\" + \"</b> <br> Use \" + Number(24 - timeOffset) + \":00\" + \" of the previous day to make trades\",\n      xaxis: {\n        title: \"Date\",\n        titlefont: {\n          family: \"Courier New, monospace\",\n          size: 18,\n          color: \"#7f7f7f\"\n        },\n        fixedrange: true\n      },\n      yaxis: {\n        title: \"% Change\" + \"(\" + coinDenominator + \")\",\n        type: \"linear\",\n        autorange: true,\n        titlefont: {\n          family: \"Courier New, monospace\",\n          size: 18,\n          color: \"#7f7f7f\"\n        },\n        fixedrange: true\n      },\n      shapes: [{\n        type: \"line\",\n        x0: \"Sun\",\n        x1: \"Sat\",\n        y0: 0,\n        y1: 0,\n        line: {\n          color: \"rgb(50, 171, 96)\",\n          width: 4,\n          dash: \"dashdot\"\n        }\n      }]\n    };\n  } else {\n    var layout = {\n      hovermode: \"closest\",\n      title: \"<b>Day of Week</b> <br> Use \" + Number(0 - timeOffset) + \":00\" + \" of the current day to make trades\",\n      xaxis: {\n        title: \"Date\",\n        titlefont: {\n          family: \"Courier New, monospace\",\n          size: 18,\n          color: \"#7f7f7f\"\n        },\n        fixedrange: true\n      },\n      yaxis: {\n        title: \"% Change\" + \"(\" + coinDenominator + \")\",\n        type: \"linear\",\n        autorange: true,\n        titlefont: {\n          family: \"Courier New, monospace\",\n          size: 18,\n          color: \"#7f7f7f\"\n        },\n        fixedrange: true\n      },\n      shapes: [{\n        type: \"line\",\n        x0: \"Sun\",\n        x1: \"Sat\",\n        y0: 0,\n        y1: 0,\n        line: {\n          color: \"rgb(50, 171, 96)\",\n          width: 4,\n          dash: \"dashdot\"\n        }\n      }]\n    };\n  }\n\n  var dataSetPlotted = [errorBars, trace2];\n  var plotData = dataSetPlotted;\n  Plotly.newPlot(gd, plotData, layout);\n  Plotly.relayout(gd, {\n    \"xaxis.categoryarray\": [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\n  });\n  $(\".radio1\").addClass(\"hide\");\n  $(\".radio2\").removeClass(\"hide\");\n  $(\"#radio2\").click(function () {\n    if (dataSetPlotted.length === 1) {\n      dataSetPlotted = [errorBars, trace2];\n    } else {\n      dataSetPlotted = [trace1];\n    }\n\n    var plotData = dataSetPlotted;\n    Plotly.newPlot(gd, plotData, layout);\n  });\n\n  window.onresize = function () {\n    Plotly.Plots.resize(gd);\n  };\n}\n\nfunction plotATHHistory(allTimeHighRelativePrice, allTimeHighRatioDates, coinDenominator, coinNumerator, allTimeHighRatio) {\n  var d3 = Plotly.d3;\n  var WIDTH_IN_PERCENT_OF_PARENT = 100,\n      HEIGHT_IN_PERCENT_OF_PARENT = 60;\n  var gd3 = d3.select(\"#myDiv\").style({\n    width: WIDTH_IN_PERCENT_OF_PARENT + \"%\",\n    \"margin-left\": (100 - WIDTH_IN_PERCENT_OF_PARENT) / 2 + \"%\",\n    height: HEIGHT_IN_PERCENT_OF_PARENT + \"vh\",\n    \"margin-top\": (60 - HEIGHT_IN_PERCENT_OF_PARENT) / 2 + \"vh\",\n    \"margin-bottom\": 0,\n    \"padding-bottom\": 0\n  });\n  var gd = gd3.node();\n  var trace1 = {\n    x: allTimeHighRatioDates.slice(-filterDays),\n    y: allTimeHighRatio.slice(-filterDays),\n    mode: \"lines\",\n    text: allTimeHighRelativePrice.slice(-filterDays),\n    type: \"scatter\"\n  };\n  var layout = {\n    title: \"ATH Ratio \" + coinNumerator + \"/\" + coinDenominator,\n    xaxis: {\n      title: \"Date\",\n      titlefont: {\n        family: \"Courier New, monospace\",\n        size: 18,\n        color: \"#7f7f7f\"\n      },\n      fixedrange: true\n    },\n    yaxis: {\n      title: \"ATH %\" + \"(\" + coinDenominator + \")\",\n      type: \"linear\",\n      autorange: true,\n      titlefont: {\n        family: \"Courier New, monospace\",\n        size: 18,\n        color: \"#7f7f7f\"\n      },\n      fixedrange: true\n    },\n    shapes: [{\n      type: \"line\",\n      xref: \"paper\",\n      x0: 0,\n      x1: 1,\n      y0: 100.0,\n      y1: 100.0,\n      line: {\n        color: \"rgb(50, 171, 96)\",\n        width: 4,\n        dash: \"dashdot\"\n      }\n    }]\n  };\n  var plotData = [trace1];\n  Plotly.newPlot(gd, plotData, layout);\n  $(\".radio2\").addClass(\"hide\");\n  $(\".radio1\").removeClass(\"hide\");\n  $(\"#radio1\").click(function () {\n    if (layout.yaxis.type === \"log\") {\n      layout.yaxis.type = \"linear\";\n    } else {\n      layout.yaxis.type = \"log\";\n    }\n\n    Plotly.newPlot(gd, plotData, layout, {\n      editable: true\n    });\n  });\n\n  window.onresize = function () {\n    Plotly.Plots.resize(gd);\n  };\n}\n\nchangeHandle();\n\nfunction changeHandle() {\n  $element = $('input[type=\"range\"]');\n  Last2000Days();\n  $element.rangeslider({\n    polyfill: false,\n    onInit: function onInit() {\n      var $handle = $(\".rangeslider__handle\", this.$range);\n      updateHandle($handle[0], this.value);\n      $(\".filter-one\").html(result[this.value] + \" - \" + result[0]);\n      filterDays = this.value;\n    }\n  }).on(\"input\", function (e) {\n    var $handle = $(\".rangeslider__handle\", e.target.nextSibling);\n    updateHandle($handle[0], filterDays);\n    var updatedNum = Math.ceil(filterDays);\n    $(\".filter-one\").html(result[filterDays] + \" - \" + result[0]);\n    filterDays = this.value;\n\n    if (menuItem === 3) {\n      var coinNumeratorInt = $(\"#coinCompare1\").val();\n      var coinNumerator = coinNumeratorInt.toUpperCase();\n      var coinDenominatorInt = $(\"#denom-choices\").val();\n      var coinDenominator = coinDenominatorInt.toUpperCase();\n      var monthEntry = $(\"#dateEntry1\").val();\n      var dayEntry = $(\"#dateEntry2\").val();\n      var yearEntry = $(\"#dateEntry3\").val();\n      var enteredDate = new Date(yearEntry, monthEntry - 1, dayEntry);\n      unixEntered = enteredDate.getTime() / 1000 + 24 * 60 * 60;\n      getHistoricalHourlyData(coinNumerator, coinDenominator, unixEntered);\n    } else {\n      onSubmit();\n    }\n  });\n  var $handle = $(\".rangeslider__handle\");\n  updateHandle($handle[0], filterDays);\n  var updatedNum = Math.ceil(filterDays);\n  $(\".filter-one\").html(result[filterDays] + \" - \" + result[0]);\n}\n\nfunction Last2000Days() {\n  result = [];\n\n  for (var i = 0; i < 2000; i++) {\n    var d = new Date();\n    d.setDate(d.getDate() - i);\n    result.push(formatDate(d));\n  }\n}\n\nfunction formatDate(date) {\n  var dd = date.getDate();\n  var mm = date.getMonth() + 1;\n  var yyyy = date.getFullYear();\n\n  if (dd < 10) {\n    dd = \"0\" + dd;\n  }\n\n  if (mm < 10) {\n    mm = \"0\" + mm;\n  }\n\n  date = mm + \"/\" + dd + \"/\" + yyyy;\n  return date;\n}\n\nfunction updateHandle(el, val) {\n  el.textContent = val;\n}\n\nfunction maxDaysHandle(historicalDate) {\n  maxDays = historicalDate.length;\n  $(\".filter1\").max = maxDays;\n}\n\n$(\".dayEntry\").on(\"keydown\", function (e) {\n  if (e.which == 13) {\n    $element.val(this.value).change();\n    onSubmit();\n\n    if (menuItem === 3) {\n      var coinNumeratorInt = $(\"#coinCompare1\").val();\n      var coinNumerator = coinNumeratorInt.toUpperCase();\n      var coinDenominatorInt = $(\"#denom-choices\").val();\n      var coinDenominator = coinDenominatorInt.toUpperCase();\n      var monthEntry = $(\"#dateEntry1\").val();\n      var dayEntry = $(\"#dateEntry2\").val();\n      var yearEntry = $(\"#dateEntry3\").val();\n      var enteredDate = new Date(yearEntry, monthEntry - 1, dayEntry);\n      unixEntered = enteredDate.getTime() / 1000 + 24 * 60 * 60;\n      getHistoricalHourlyData(coinNumerator, coinDenominator, unixEntered);\n    }\n\n    changeHandle();\n  }\n});\n$(\".coinEntry\").on(\"keydown\", function (e) {\n  if (e.which == 13) {\n    var coinNumeratorInt = $(\"#coinCompare1\").val();\n    var coinNumerator = coinNumeratorInt.toUpperCase();\n    var coinDenominatorInt = $(\"#denom-choices\").val();\n    var coinDenominator = coinDenominatorInt.toUpperCase();\n    var monthEntry = $(\"#dateEntry1\").val();\n    var dayEntry = $(\"#dateEntry2\").val();\n    var yearEntry = $(\"#dateEntry3\").val();\n    var enteredDate = new Date(yearEntry, monthEntry - 1, dayEntry);\n    var unixEntered = enteredDate.getTime() / 1000 + 24 * 60 * 60;\n    getHistoricalPriceData(coinNumerator, coinDenominator, unixEntered);\n\n    if (menuItem === 3) {\n      var coinNumeratorInt = $(\"#coinCompare1\").val();\n      var coinNumerator = coinNumeratorInt.toUpperCase();\n      var coinDenominatorInt = $(\"#denom-choices\").val();\n      var coinDenominator = coinDenominatorInt.toUpperCase();\n      var monthEntry = $(\"#dateEntry1\").val();\n      var dayEntry = $(\"#dateEntry2\").val();\n      var yearEntry = $(\"#dateEntry3\").val();\n      var enteredDate = new Date(yearEntry, monthEntry - 1, dayEntry);\n      unixEntered = enteredDate.getTime() / 1000 + 24 * 60 * 60;\n      getHistoricalHourlyData(coinNumerator, coinDenominator, unixEntered);\n    }\n  }\n});\n\nfunction getHistoricalHourlyData(coinNumerator, coinDenominator, unixEntered) {\n  var hourlyDate = [];\n  var hourlyLongDate = [];\n  var hourlyHour = [];\n  var hourlyPrice = [];\n  var hourlyPriceChange = [];\n  $.get(\"https://min-api.cryptocompare.com/data/histohour?fsym=\" + coinNumerator + \"&tsym=\" + coinDenominator + \"&limit=2000&aggregate=1&e=\" + exchange, function (data, status) {\n    if (data.ConversionType.type === \"divide\") {\n      getHistoricalHourlyDataAlt(coinNumerator, coinDenominator, unixEntered);\n    } else {\n      for (i = 2001 - filterDays * 24; i <= data.Data.length - 1; i++) {\n        var hourlyDateInt = new Date(data.Data[i].time * 1000);\n        var hourlyHourInt = hourlyDateInt.toString().slice(16, 18);\n        var hourlyPriceInt = data.Data[i].close;\n        var hourlyPriceChangeInt = 100 * (data.Data[i].close / data.Data[i].open - 1);\n        hourlyDate.push(hourlyDateInt.toString().slice(4, 15));\n        hourlyLongDate.push(hourlyDateInt.toString().slice(4, 21));\n        hourlyHour.push(hourlyHourInt);\n        hourlyPrice.push(hourlyPriceInt);\n        hourlyPriceChange.push(hourlyPriceChangeInt);\n      }\n\n      groups3 = {};\n      $.each(hourlyHour, function (ind, itm) {\n        if (!groups3[itm]) {\n          groups3[itm] = {\n            hourValues: []\n          };\n        }\n\n        groups3[itm].hourValues.push(hourlyPriceChange[ind]); // sum values belonging to same key\n      });\n      var hourlyChangeAverage = [];\n      var hourlyChangeMedian = [];\n      var hourlyChangeStd = [];\n      var hourlyCI = [];\n\n      for (var i = 0; i <= 23; i++) {\n        hourlyChangeAverage.push(math.mean(groups3[hourlyHour[i]].hourValues));\n        hourlyChangeStd.push(math.std(groups3[hourlyHour[i]].hourValues));\n        hourlyCI.push(1.96 * (hourlyChangeStd[i] / math.sqrt(groups3[hourlyHour[i]].hourValues.length)));\n      }\n\n      var errorBars = {\n        x: hourlyHour.slice(-filterDays * 24),\n        y: hourlyChangeAverage.slice(-filterDays * 24),\n        error_y: {\n          type: \"data\",\n          array: hourlyCI,\n          visible: true\n        },\n        mode: \"markers\",\n        type: \"scatter\"\n      };\n      plotHourlyData(hourlyLongDate, hourlyDate, hourlyHour, hourlyPrice, errorBars, hourlyPriceChange, coinNumerator, coinDenominator);\n    }\n  });\n}\n\nfunction getHistoricalHourlyDataAlt(coinNumerator, coinDenominator, unixEntered) {\n  var hourlyDate = [];\n  var hourlyLongDate = [];\n  var hourlyHour = [];\n  var hourlyPrice = [];\n  var hourlyPriceChange = [];\n  $.get(\"https://min-api.cryptocompare.com/data/histohour?fsym=\" + coinNumerator + \"&tsym=\" + coinDenominator + \"&limit=2000&aggregate=1&e=\" + exchange + \"&tryConversion=false\", function (data, status) {\n    for (i = 2001 - filterDays * 24; i <= data.Data.length - 1; i++) {\n      var hourlyDateInt = new Date(data.Data[i].time * 1000);\n      var hourlyHourInt = hourlyDateInt.toString().slice(16, 18);\n      var hourlyPriceInt = data.Data[i].close;\n      var hourlyPriceChangeInt = 100 * (data.Data[i].close / data.Data[i].open - 1);\n      hourlyDate.push(hourlyDateInt.toString().slice(4, 15));\n      hourlyLongDate.push(hourlyDateInt.toString().slice(4, 21));\n      hourlyHour.push(hourlyHourInt);\n      hourlyPrice.push(hourlyPriceInt);\n      hourlyPriceChange.push(hourlyPriceChangeInt);\n    }\n\n    groups3 = {};\n    $.each(hourlyHour, function (ind, itm) {\n      if (!groups3[itm]) {\n        groups3[itm] = {\n          hourValues: []\n        };\n      }\n\n      groups3[itm].hourValues.push(hourlyPriceChange[ind]); // sum values belonging to same key\n    });\n    var hourlyChangeAverage = [];\n    var hourlyChangeStd = [];\n    var hourlyCI = [];\n\n    for (var i = 0; i <= 23; i++) {\n      hourlyChangeAverage.push(math.mean(groups3[hourlyHour[i]].hourValues));\n      hourlyChangeStd.push(math.std(groups3[hourlyHour[i]].hourValues));\n      hourlyCI.push(1.96 * (hourlyChangeStd[i] / math.sqrt(groups3[hourlyHour[i]].hourValues.length)));\n    }\n\n    var errorBars = {\n      x: hourlyHour.slice(-filterDays * 24),\n      y: hourlyChangeAverage.slice(-filterDays * 24),\n      error_y: {\n        type: \"data\",\n        array: hourlyCI,\n        visible: true\n      },\n      mode: \"markers\",\n      type: \"scatter\"\n    };\n    plotHourlyData(hourlyLongDate, hourlyDate, hourlyHour, hourlyPrice, errorBars, hourlyPriceChange, coinNumerator, coinDenominator, hourlyChangeMedian);\n  });\n}\n\nfunction plotHourlyData(hourlyLongDate, hourlyDate, hourlyHour, hourlyPrice, errorBars, hourlyPriceChange, coinNumerator, coinDenominator, hourlyChangeMedian) {\n  var trace1 = {\n    x: hourlyHour.slice(-filterDays * 24),\n    y: hourlyPriceChange.slice(-filterDays * 24),\n    mode: \"markers\",\n    name: \"Close price\",\n    type: \"scatter\"\n  };\n  var layout = {\n    title: \"Hourly Change \" + coinNumerator + \" vs \" + coinDenominator,\n    xaxis: {\n      title: \"Hour (Local Time)\",\n      titlefont: {\n        family: \"Courier New, monospace\",\n        size: 18,\n        color: \"#7f7f7f\"\n      },\n      fixedrange: true\n    },\n    yaxis: {\n      title: \"% Change\" + \" \" + coinDenominator,\n      type: \"linear\",\n      autorange: true,\n      titlefont: {\n        family: \"Courier New, monospace\",\n        size: 18,\n        color: \"#7f7f7f\"\n      },\n      fixedrange: true\n    }\n  };\n  var dataSetPlotted = errorBars;\n  var plotData = [dataSetPlotted];\n  Plotly.newPlot(\"myDiv\", plotData, layout);\n  Plotly.relayout(\"myDiv\", {\n    \"xaxis.categoryarray\": [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\n  });\n  $(\".radio1\").addClass(\"hide\");\n  $(\".radio2\").removeClass(\"hide\");\n  $(\"#radio2\").click(function () {\n    if (dataSetPlotted === errorBars) {\n      dataSetPlotted = trace1;\n    } else {\n      dataSetPlotted = errorBars;\n    }\n\n    var plotData = [dataSetPlotted];\n    Plotly.newPlot(\"myDiv\", plotData, layout);\n  });\n}\n\ndocument.getElementById(\"exchange-choices\").addEventListener(\"change\", exchangeChange);\n\nfunction exchangeChange() {\n  exchange = this.value;\n  onSubmit();\n}\n\ndocument.getElementById(\"denom-choices\").addEventListener(\"change\", denomChange);\n\nfunction denomChange() {\n  coinDenominator = this.value;\n  onSubmit();\n}\n\njQuery(document).ready(function ($) {\n  var popupInfo = {\n    0: \"The Price chart shows the daily close price of a given coin pairing (see chart title) over time\",\n    1: \"The Weekday chart shows the amount of daily change (close/open - 1) for each weekday over a given time period. A confidence interval is calculated and shown with Error Bars. Data is based on GMT time but the suggested time to make decisions is listed on the chart and is based on the timezone given by your network.\",\n    2: \"The All Time High chart shows the close price of each day versus the ATH reached prior to that date. For instance, if on January 1st an ATH of $100 was reached but on January 2nd our close price was $110, the value on the chart for Jan 2 would show 110% of ATH for that day. However, if on January 3rd the price stayed stable at $110, the chart value for Jan 3 would be 100%. This may be a useful tool for setting limit buys as it suggests the absolute lowest the price dropped relative to historical ATHs in the past.\",\n    3: \"The Hourly chart shows the amount of hourly change (close/open - 1) for up to the past 2000 hours. The goal of the chart is to identify patterns in price action based on time zone. As with the Weekly chart, confidence intervals are used.\"\n  }; //open popup\n\n  $(\".popup-trigger\").on(\"click\", function (event) {\n    event.preventDefault();\n    $(\".popup\").addClass(\"is-visible\");\n    $(\".popup-container\").html(popupInfo[menuItem]);\n  }); //close popup\n\n  $(\".popup\").on(\"click\", function (event) {\n    if ($(event.target).is(\".popup-close\") || $(event.target).is(\".popup\")) {\n      event.preventDefault();\n      $(this).removeClass(\"is-visible\");\n    }\n  }); //close popup when clicking the esc keyboard button\n\n  $(document).keyup(function (event) {\n    if (event.which == \"27\") {\n      $(\".popup\").removeClass(\"is-visible\");\n    }\n  });\n});\n\n//# sourceURL=webpack://Cryptophan/./src/index.js?");
/******/ })()
;